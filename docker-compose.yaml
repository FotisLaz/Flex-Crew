version: "3.8"

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: flexcrew-db
    environment:
      POSTGRES_DB: flexcrew # Database name
      POSTGRES_USER: user # Default username
      POSTGRES_PASSWORD: password # Default password
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    restart: unless-stopped

  # Backend Service (Spring Boot Application)
  backend:
    # Build the image using the Dockerfile in the current directory (targeting the final stage)
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flexcrew-backend
    ports:
      - "8081:8081" # Map host port 8081 to container port 8081 to match application.properties
    environment:
      # Database connection details for the Spring Boot application
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/flexcrew
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      # Add any other backend-specific environment variables here
      # Example: SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - db # Ensure the database service starts before the backend
    restart: unless-stopped

  # Frontend Service (React Development Server)
  # This service is primarily for development to enable hot-reloading.
  # For production, the Dockerfile builds the frontend and the backend serves its static files.
  # If you run `docker-compose up --build`, this will start the npm dev server.
  frontend:
    image: node:18-alpine # Use a standard Node image for development
    container_name: flexcrew-frontend
    working_dir: /app
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000 (React dev server)
    volumes:
      # Mount the local frontend code into the container for live updates
      # This means changes in your local ./frontend directory will reflect in the container.
      - ./frontend:/app
      # Use a named volume for node_modules to avoid overwriting it from the host,
      # especially if node_modules were installed during an image build step that is not used here.
      # - frontend_node_modules:/app/node_modules # Declare if using named volume for node_modules
    environment:
      # CHOKIDAR_USEPOLLING is often needed for hot-reloading to work correctly in Docker
      - CHOKIDAR_USEPOLLING=true
      # Ensure VITE_API_BASE_URL is set if your frontend expects it for API calls during development
      # e.g., VITE_API_BASE_URL=http://localhost:8080/api/v1 (if accessing backend directly from host's perspective)
      # or VITE_API_BASE_URL=http://backend:8080/api/v1 (if frontend in container calls backend in container via service name)
    # Command to install dependencies (if not present in volume) and start dev server
    command: sh -c "if [ ! -d "node_modules" ]; then npm install; fi && npm start"
    depends_on:
      - backend # Optional: if frontend needs backend to be up for some dev tasks, though often run in parallel
    # restart: unless-stopped # Usually not needed for a dev server

volumes:
  # Named volume for persisting PostgreSQL data
  postgres_data:
  # frontend_node_modules: # Declare if using named volume for node_modules
